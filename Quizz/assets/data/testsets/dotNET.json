{
  "name": "Questionnaire .NET / ASP.NET",
  "id": "dotnet_questions_id",
  "questions": [
    {
      "is_multichoice": false,
      "id": "1",
      "label": "Quelle est la différence entre les architectures MVC et MVVM dans le contexte d'ASP.NET Core ?",
      "choices": [
        {
          "is_right": false,
          "label": "MVC est utilisé pour les applications web tandis que MVVM est utilisé pour les applications mobiles.",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "MVC divise l'application en Modèle, Vue et Contrôleur, tandis que MVVM introduit le concept de bindings entre la Vue et le ViewModel.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "MVC est plus récent que MVVM et offre plus de flexibilité.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "MVVM est spécifiquement conçu pour les applications ASP.NET Core.",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": true,
      "id": "2",
      "label": "Quand utiliseriez-vous le pattern Repository avec l'Entity Framework dans une application ASP.NET Core ?",
      "choices": [
        {
          "is_right": false,
          "label": "Pour simplifier les tests unitaires en isolant la couche de données.",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "Pour abstraire la logique de persistance et permettre des changements de source de données sans affecter le reste de l'application.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Pour améliorer les performances des requêtes SQL.",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "Pour centraliser la gestion des opérations CRUD (Create, Read, Update, Delete).",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": false,
      "id": "3",
      "label": "Quel est le concept de middleware dans ASP.NET Core ?",
      "choices": [
        {
          "is_right": false,
          "label": "Un service de gestion des utilisateurs.",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "Un composant qui gère les requêtes et réponses HTTP dans le pipeline de requêtes.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Une bibliothèque pour la gestion des bases de données.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Un outil de déploiement d'applications.",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": false,
      "id": "4",
      "label": "Comment gérez-vous l'ordre d'exécution des middlewares dans l'application pipeline ASP.NET Core ?",
      "choices": [
        {
          "is_right": true,
          "label": "En les ajoutant dans l'ordre correct dans la méthode Configure de la classe Startup.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "En utilisant des annotations sur les classes middleware.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "En les configurant dans le fichier appsettings.json.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "En les déclarant dans la méthode ConfigureServices de la classe Startup.",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": true,
      "id": "5",
      "label": "Comment configurer et utiliser la politique d'autorisation dans ASP.NET Core ?",
      "choices": [
        {
          "is_right": false,
          "label": "En créant des classes de politique personnalisées.",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "En définissant des politiques d'autorisation dans la méthode ConfigureServices et en les appliquant aux contrôleurs ou actions.",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "En utilisant des attributs comme [Authorize(Policy = \"NomDeLaPolitique\")].",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "En configurant les règles de sécurité dans le fichier appsettings.json.",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": false,
      "id": "6",
      "label": "Comment gérez-vous les migrations de base de données dans Entity Framework Core ?",
      "choices": [
        {
          "is_right": true,
          "label": "En utilisant les commandes Add-Migration et Update-Database dans la console du gestionnaire de package.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "En modifiant directement la base de données.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "En utilisant des scripts SQL personnalisés.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "En configurant les migrations dans le fichier appsettings.json.",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": true,
      "id": "7",
      "label": "Comment optimisez-vous les requêtes LINQ pour améliorer les performances dans une application ASP.NET Core ?",
      "choices": [
        {
          "is_right": true,
          "label": "En utilisant le chargement paresseux (Lazy Loading) et le chargement explicite (Explicit Loading).",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "En évitant les jointures et les relations complexes.",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "En utilisant les méthodes AsNoTracking() et Include() de manière appropriée.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "En écrivant des requêtes SQL à la place des requêtes LINQ.",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": true,
      "id": "8",
      "label": "Quelles sont les meilleures pratiques pour améliorer les performances d'une application ASP.NET Core en production ?",
      "choices": [
        {
          "is_right": false,
          "label": "Minimiser l'utilisation de middlewares.",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "Utiliser la mise en cache (caching) pour les données fréquemment accédées.",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "Activer la compression des réponses HTTP.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Utiliser des services monolithiques au lieu de microservices.",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": true,
      "id": "9",
      "label": "Comment configurez-vous le caching dans ASP.NET Core pour améliorer la performance de l'application ?",
      "choices": [
        {
          "is_right": false,
          "label": "En utilisant le middleware ResponseCompression.",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "En utilisant les attributs [ResponseCache] sur les contrôleurs et actions appropriés.",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "En configurant des services de cache comme MemoryCache ou DistributedCache.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "En configurant le caching dans le fichier appsettings.json.",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": true,
      "id": "10",
      "label": "Comment configurez-vous le déploiement continu d'une application ASP.NET Core en utilisant des outils comme Azure DevOps ou GitHub Actions ?",
      "choices": [
        {
          "is_right": true,
          "label": "En configurant des pipelines de build et de release pour automatiser le processus de déploiement.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "En déployant manuellement l'application à chaque mise à jour.",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "En utilisant des scripts de déploiement automatisés dans le fichier YAML de configuration du pipeline.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "En configurant des notifications pour chaque déploiement.",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": true,
      "id": "11",
      "label": "Comment gérez-vous les configurations sensibles (comme les secrets et les clés API) dans un pipeline de CI/CD ?",
      "choices": [
        {
          "is_right": false,
          "label": "En les stockant directement dans le fichier de configuration de l'application.",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "En utilisant des services de gestion des secrets comme Azure Key Vault ou AWS Secrets Manager.",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "En configurant des variables d'environnement dans le pipeline de CI/CD.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "En les encryptant manuellement dans le code source.",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": true,
      "id": "13",
      "label": "Quels outils utilisez-vous pour analyser et assurer la qualité du code dans vos projets ASP.NET Core ?",
      "choices": [
        {
          "is_right": true,
          "label": "Visual Studio Code Analysis et StyleCop.",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "SonarQube pour l'analyse continue de la qualité du code.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Postman pour les tests d'API.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Azure DevOps pour le déploiement continu.",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": true,
      "id": "14",
      "label": "Quelles sont les pratiques courantes pour sécuriser une application ASP.NET Core contre les attaques courantes comme XSS, CSRF, et les injections SQL ?",
      "choices": [
        {
          "is_right": true,
          "label": "Utiliser des mécanismes de validation et de sanitation des entrées utilisateur.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Activer la journalisation détaillée pour toutes les requêtes.",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "Utiliser les attributs [ValidateAntiForgeryToken] pour se protéger contre les attaques CSRF.",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "Utiliser des ORM comme Entity Framework pour éviter les injections SQL.",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": true,
      "id": "15",
      "label": "Comment configurer HTTPS et forcer son utilisation dans une application ASP.NET Core ?",
      "choices": [
        {
          "is_right": false,
          "label": "En configurant les règles de firewall.",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "En ajoutant le middleware UseHttpsRedirection dans la méthode Configure de la classe Startup.",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "En configurant un certificat SSL dans les paramètres de l'application.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "En utilisant un service externe pour gérer le cryptage HTTPS.",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": true,
      "id": "16",
      "label": "Comment gérez-vous la versioning des API dans ASP.NET Core pour maintenir la compatibilité ?",
      "choices": [
        {
          "is_right": false,
          "label": "En modifiant directement les routes existantes.",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "En utilisant des namespaces différents pour chaque version.",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "En utilisant des attributs comme [ApiVersion] et [Route] pour spécifier la version des contrôleurs.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "En créant une nouvelle application pour chaque version.",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": true,
      "id": "17",
      "label": "Comment implémenter une API RESTful en utilisant ASP.NET Core ?",
      "choices": [
        {
          "is_right": false,
          "label": "En utilisant des fichiers JSON pour configurer les routes.",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "En utilisant des contrôleurs avec les attributs [ApiController] et [Route].",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "En suivant les conventions REST pour les verbes HTTP (GET, POST, PUT, DELETE).",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "En utilisant SignalR pour la communication en temps réel.",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": true,
      "id": "18",
      "label": "Comment intégrez-vous des frameworks front-end modernes comme Angular ou React avec une application ASP.NET Core ?",
      "choices": [
        {
          "is_right": false,
          "label": "En utilisant WebForms pour héberger les composants front-end.",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "En configurant le middleware UseSpa dans la méthode Configure de la classe Startup.",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "En utilisant des modèles de projet ASP.NET Core spécifiques pour Angular ou React.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "En intégrant les fichiers front-end directement dans le dossier wwwroot.",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": false,
      "id": "19",
      "label": "Qu'elle affirmation est vraie concernant Razor Pages ?",
      "choices": [
        {
          "is_right": true,
          "label": "Les Razor Pages offrent une approche plus simple et plus directe pour créer des pages web par rapport au modèle MVC.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Les Razor Pages remplacent entièrement le modèle MVC dans ASP.NET Core.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Les Razor Pages ne supportent pas le binding de modèles de données.",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": true,
      "id": "video_introduction_dotnet_q1",
      "label": "Si un problème survient lors de la création d'une commande en production, quelles étapes devrions-nous suivre pour résoudre le problème et déployer un correctif ?",
      "choices": [
        {
          "is_right": true,
          "label": "Créer une branche hotFixes/creationCommande depuis la branche production",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Créer une branche hotFixes/creationCommande depuis la branche dev",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "Modifier le code sur la branche hotFixes/creationCommande",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "Fusionner la branche hotFixes/creationCommande dans la branche dev",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "Fusionner la branche hotFixes/creationCommande dans la branche production",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "Déployer le correctif",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": true,
      "id": "video_introduction_dotnet_q2",
      "label": "Quelles sont les différences entre .NET Framework et .NET ?",
      "choices": [
        {
          "is_right": true,
          "label": ".NET est un framework open-source et multiplateforme, tandis que .NET Framework est limité à Windows et n'est pas open-source.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": ".NET est uniquement destiné aux applications de bureau traditionnelles, tandis que .NET Framework est destiné aux applications modernes et basées sur le cloud.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": ".NET Framework est un framework open-source et multiplateforme, tandis que .NET est limité à Windows et n'est pas open-source.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": ".NET et .NET Framework sont identiques en termes de fonctionnalités et de portée, mais diffèrent uniquement par leur nom.",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": true,
      "id": "video_introduction_dotnet_q3",
      "label": "Quelle est la principale différence dans la gestion des injections de dépendances entre ASP.NET Framework et ASP.NET Core ?",
      "choices": [
        {
          "is_right": false,
          "label": "ASP.NET Framework utilise un conteneur d'injection de dépendances intégré, tandis qu'ASP.NET Core nécessite des bibliothèques tierces pour l'injection de dépendances.",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "ASP.NET Core utilise un conteneur d'injection de dépendances intégré, tandis qu'ASP.NET Framework nécessite généralement des bibliothèques tierces comme Unity ou Autofac pour gérer l'injection de dépendances.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "ASP.NET Framework et ASP.NET Core utilisent tous deux des conteneurs d'injection de dépendances intégrés de la même manière.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "ASP.NET Core ne prend pas en charge l'injection de dépendances, tandis qu'ASP.NET Framework en fait usage intensif.",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": true,
      "id": "video_introduction_dotnet_q4",
      "label": "Quels frameworks sont compatibles avec Linux ou Android ?",
      "choices": [
        {
          "is_right": true,
          "label": ".NET Core",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "Mono",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "Xamarin",
          "explanations": []
        },
        {
          "is_right": false,
          "label": ".NET Framework",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": true,
      "id": "video_introduction_dotnet_q5",
      "label": "Parmi ces libraries quels sont celles qui sont des ORM (Object-Relational-Database) ?",
      "choices": [
        {
          "is_right": true,
          "label": "Entity Framework Core",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "NHibernate",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "Dapper",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Datadog",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": true,
      "id": "video_introduction_dotnet_q6",
      "label": "Quels sont les langages que Microsoft propose sur la plateforme NET ?",
      "choices": [
        {
          "is_right": true,
          "label": "C#",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "VB.NET",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "F#",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Python",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": true,
      "id": "bases_csharp_q1",
      "label": "Quelles sont les deux implémentations possibles d'une propriété en C# ?",
      "choices": [
        {
          "is_right": true,
          "label": "Auto-implémentée",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "Avec attribut privé",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Avec méthode publique",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Avec méthode protégée",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": false,
      "id": "bases_csharp_q2",
      "label": "Le constructeur est-il obligatoire en C# ?",
      "choices": [
        {
          "is_right": true,
          "label": "Non",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Oui, toujours",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Seulement pour les classes abstraites",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": true,
      "id": "bases_csharp_q3",
      "label": "De quoi une classe peut-elle hériter ?",
      "choices": [
        {
          "is_right": true,
          "label": "Une interface",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Une structure",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "Une classe abstraite",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": false,
      "id": "bases_csharp_q4",
      "label": "Quelle est le type de collection qui expose une méthode Add et Remove ?",
      "choices": [
        {
          "is_right": true,
          "label": "List",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Array",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Queue",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": false,
      "id": "bases_csharp_q5",
      "label": "Que donne le code ci-dessous ?\nvar variable = 10;\nvariable = \"Hello\";\nConsole.WriteLine(variable);",
      "choices": [
        {
          "is_right": false,
          "label": "Le code compile et affiche \"10\".",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Le code compile et affiche \"Hello\".",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "Le code provoque une erreur de compilation.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Le code compile et affiche \"System.Object\".",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": true,
      "id": "bases_csharp_q6",
      "label": "Quelles sont les conditions pour créer une extension d'un type existant ?",
      "choices": [
        {
          "is_right": true,
          "label": "La méthode doit être dans une classe \"static\"",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "La classe doit s'appeler \"Extension\"",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "La méthode doit être \"static\"",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "Le premier paramètre doit avoir le mot-clé \"this\"",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": false,
      "id": "type_conversions_q1",
      "label": "Quelle est la différence entre une conversion implicite et explicite ?",
      "choices": [
        {
          "is_right": true,
          "label": "Une conversion implicite est automatique et sans perte de données ; une conversion explicite nécessite un casting et peut perdre des données.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Une conversion implicite est toujours plus rapide que la conversion explicite.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Une conversion implicite ne fonctionne que pour les types de valeur ; une conversion explicite fonctionne pour tous les types.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Une conversion explicite est automatique ; une conversion implicite nécessite un casting.",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": false,
      "id": "type_conversions_q2",
      "label": "Laquelle de ces instructions est correcte et permet de caster le véhicule \"jeep\" en \"Voiture\" ?",
      "choices": [
        {
          "is_right": true,
          "label": "(Voiture) jeep",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "jeep as voiture",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Convert.ToVoiture(jeep)",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": false,
      "id": "type_conversions_q3",
      "label": "Est-ce qu'il est possible de créer une conversion implicite pour un type personnalisé ?",
      "choices": [
        {
          "is_right": true,
          "label": "Oui, en définissant un opérateur de conversion implicite dans le type personnalisé.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Non, seules les conversions explicites sont possibles pour les types personnalisés.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Oui, mais seulement vers les types primitifs comme int et double.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Non, les conversions implicites sont réservées aux types de base uniquement.",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": false,
      "id": "delegates_q1",
      "label": "Un délégué est-il réassignable ?",
      "choices": [
        {
          "is_right": true,
          "label": "Oui",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Non, jamais",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": false,
      "id": "delegates_q2",
      "label": "Si j'ajoute plusieurs méthodes à un même délégué, que se passe-t-il ?",
      "choices": [
        {
          "is_right": true,
          "label": "Toutes les méthodes sont appelées dans l'ordre où elles ont été ajoutées.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Seule la dernière méthode ajoutée est appelée lorsque le délégué est invoqué.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Une exception est levée si plusieurs méthodes sont ajoutées au délégué.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Les méthodes sont ajoutées mais ne seront pas appelées lorsque le délégué est invoqué.",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": false,
      "id": "delegates_q3",
      "label": "Combien de paramètres peut avoir un délégué personnalisé ?",
      "choices": [
        {
          "is_right": true,
         "label": "Jusqu'à 16 paramètres maximum.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Jusqu'à 10 paramètres maximum.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Uniquement 1 ou 2 paramètres.",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Uniquement 5 paramètres.",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": false,
      "id": "delegates_q4",
      "label": "Est-ce que le code suivant décrit un délégué valide en c# ?\nAction<string> print = message => Console.WriteLine(message);\nprint('Hello World!');",
      "choices": [
        {
          "is_right": true,
          "label": "Oui",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Non",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": false,
      "id": "exception_creation_q1",
      "label": "Laquelle de ces déclaration d'exception personnalisée est correcte",
      "choices": [
        {
          "is_right": true,
          "label": "public class MyException : Exception",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "public class MyException : Application",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "public class MyException : Error",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": false,
      "id": "exception_creation_q2",
      "label": "A partir de cette classe d'exception personnalisée : \npublic class MyException : Exception\n{\n public MyException() { }\n}\nLequel de ces lancement d'exception est correcte",
      "choices": [
        {
          "is_right": true,
          "label": "throw new MyException();",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "throw MyException();",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "throw new MyException;",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "throw MyException;",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": true,
      "id": "linq_q1",
      "label": "Quelles sont les deux méthodes possibles pour travailler avec LINQ ?",
      "choices": [
        {
          "is_right": true,
          "label": "Requête",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "Méthodes",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "SQL",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Appel de données",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": false,
      "id": "linq_q2",
      "label": "Que permet la méthode Linq Distinct() ?",
      "choices": [
        {
          "is_right": true,
          "label": "Récupérer les éléments non dupliqués",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Récupérer les éléments non flottants",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Récupérer les éléments un par un",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": false,
      "id": "linq_q3",
      "label": "Laquelle de ces expressions permet de renvoyer un tableau avec l'âge des personnes ?",
      "choices": [
        {
          "is_right": true,
          "label": "people.Select(p => p.Age).ToArray()",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "people.Select(p => new { p.Age })",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "people.Select(p => p.Name)",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": false,
      "id": "linq_q4",
      "label": "Vous avez une liste d'élèves, où chaque élève a une liste de notes. Laquelle des propositions suivantes permet d'obtenir un tableau a une dimension contenant toutes les notes de tous les élèves de la liste d'eleves ?",
      "choices": [
        {
          "is_right": true,
          "label": "var toutesLesNotes = eleves.SelectMany(eleve => eleve.Notes);",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "var toutesLesNotes = eleves.Select(eleve => eleve.Notes);",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "var eleves.SelectMany(function(eleve) { return eleve.Notes; }).ToList();",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": true,
      "id": "multi_layer_applications_q1",
      "label": "Dans une architecture multi-couche, quelles sont les trois couches principales d'une architecture trois tiers ?",
      "choices": [
        {
          "is_right": true,
          "label": "Couche Présentation, Couche Traitement, Couche Accès aux Données",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Couche Interface Utilisateur, Couche Réseau, Couche Sécurité",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Couche Front-End, Couche Back-End, Couche Middleware",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Couche API, Couche Middleware, Couche Base de Données",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": false,
      "id": "multi_layer_applications_q2",
      "label": "Qu'elles sont les réponsabilités d'un Contrôleur dans une application ASP.NET Core MVC ?",
      "choices": [
        {
          "is_right": true,
          "label": "Transformer et préparer les données fournies en entrées",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Implémenter l'algorithme/logique métier",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Communiquer avec la base de données",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "Valider les données en entrée",
          "explanations": []
        },
        
        {
          "is_right": true,
          "label": "Transformer et préparer les données à destination de la sortie",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": false,
      "id": "architecture_q1",
      "label": "Dans une application en architecture propre/hexagonale, dans quels projets acceptons nous conventionnelement de faire usage des Annotations du Framework ?",
      "choices": [
        {
          "is_right": false,
          "label": "Projet App.Core",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Projet App.SharedKernel",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "Projet App.Infrastructure",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "Projet App.Web",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": false,
      "id": "architecture_q2",
      "label": "Pour une interface IEmailService, dans une architecture hexagonal, quel projet doit détenir cette classe ?",
      "choices": [
        {
          "is_right": true,
          "label": "Projet App.Core",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Projet App.SharedKernel",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Projet App.Infrastructure",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Projet App.Web",
          "explanations": []
        }
      ]
    },
    {
      "is_multichoice": false,
      "id": "architecture_q3",
      "label":"Considérons ce code :\nclass Service {\n Database database;\n\n Service() {\n this.database = new Database();\n }\n}\n\n\nQuel principe de programmation ce code viol-t-il ?",
      "choices": [
        {
          "is_right": false,
          "label": "Le principe de substitution de Liskov",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Le principe d'ouverture/fermeture",
          "explanations": []
        },
        {
          "is_right": false,
          "label": "Le principe de ségrégation des interfaces",
          "explanations": []
        },
        {
          "is_right": true,
          "label": "Le principe d'inversion des dépendances",
          "explanations": []
        }
      ]
    }
  ]
}